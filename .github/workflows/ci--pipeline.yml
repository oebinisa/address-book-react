name: CI Pipeline for Address Book App + Yarn/Jest

on:
  push:
    branches:
      - ci-actions-jest
  pull_request:
    branches:
      - ci-actions-jest

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_DATABASE: address_book_db
          MYSQL_USER: user
          MYSQL_PASSWORD: user_password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping --silent" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Setup Node.js environment for both client and server
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # Install and Test Frontend
      - name: Install Frontend Dependencies and Run Jest Tests
        working-directory: ./client
        run: |
            yarn install
            yarn test

      # Install and Test Backend
      - name: Install Backend Dependencies and Run Jest Tests
        working-directory: ./server
        run: |
            yarn install
            yarn test

      # MySQL Setup for Backend Tests
      - name: Wait for MySQL to be ready
        run: |
          until mysqladmin ping -h 127.0.0.1 --silent; do
            echo 'Waiting for MySQL...'
            sleep 3
          done

      - name: Run Backend Tests with Database
        working-directory: ./server
        env:
          DB_HOST: 127.0.0.1
          DB_USER: user
          DB_PASSWORD: user_password
          DB_NAME: address_book_db
        run: |
          yarn test

      - name: Build Frontend
        working-directory: ./client
        run: npm run build 

      - name: Run Frontend Tests
        working-directory: ./client
        run: npm test || exit 1
          
      - name: Run Backend Tests
        working-directory: ./server
        run: npm test || exit 1

      - name: Zip Artifacts
        run: |
          if [ -d "client/dist" ]; then
            zip -r build-artifacts.zip client/dist
          else
            echo "Error: client/dist directory not found"
            exit 1
          fi

      - name: Configure AWS Credentials
        run: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set default.region us-east-1  # Set to your specific region
        env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Upload Artifacts to S3
        run: |
            TIMESTAMP=$(date +%Y%m%d%H%M%S)
            aws s3 cp build-artifacts.zip s3://simartefacts/build-artifacts-$TIMESTAMP.zip

      - name: Send Email Notification
        env:
          SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
        run: |
          curl --request POST \
          --url https://api.sendgrid.com/v3/mail/send \
          --header "Authorization: Bearer $SENDGRID_API_KEY" \
          --header "Content-Type: application/json" \
          --data '{
            "personalizations": [{"to": [{"email": "o.oluwapelumi@gmail.com"}]}],
            "from": {"email": "developer@simionisystems.com"},
            "subject": "CI Pipeline Completion",
            "content": [{"type": "text/plain", "value": "CI pipeline for address-book-react completed successfully."}]
          }'
